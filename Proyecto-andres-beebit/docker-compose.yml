#version: '3.8' ->Es la version de la sintaxis del docker



services:


  postgres:
    image: postgres:13-alpine #Usa la imagen de postgreSQL en la version 13 Alpine que es mas ligera y pesa menos
    container_name: dbbeebit #nombre del contenedor para que lo pueda identificar
    environment:
      POSTGRES_USER: ${POSTGRES_USER}  #nom del ususrio de la db
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}  #Contraseña para el usuario de la db
      POSTGRES_DB: ${POSTGRES_DB} ##Nombre de la db que se crea al inicio
    ports:
      - "5432:5432"  #Enruta el puerto 5432 del host para que tenga acceso a la base de datos desde local
    volumes:
      - postgres_data:/var/lib/postgresql/data  #Esto lo que hace es que se guarden en un volumen que se llama postgres_data al directorio /var/lib... dentro del contenedor de docker.Esto hace que los datos se queden almacenados aunque reinicie o elimine.
    restart: always  #reinicia automaticamente el contenedor si se detiene por algun problema o  error.



  directus:
    image: directus/directus:latest
    container_name: directus
    environment:
      - DATABASE_CLIENT=${DATABASE_CLIENT}  #Indica que directus usara postgreSQL como db
      - DATABASE_HOST=${DATABASE_HOST}  #Indica que la db esta en el servicio postgres en el mismo archivo docker-compose
      - DATABASE_PORT=${DATABASE_PORT}  #Puerto donde postgreSQL esta apuntando
      - DATABASE_USER=${DATABASE_USER}  #usuario 
      - DATABASE_PASSWORD=${DATABASE_PASSWORD} #contraseña
      - DATABASE_NAME=${DATABASE_NAME}  #nombre de la db
      - PUBLIC_URL=${PUBLIC_URL}  #Url publica de directus donde apunta
      - PORT=${PORT} #puerto donde se ejecuta directus dentro del contenedor
      - ADMIN_EMAIL=${DIRECTUS_ADMIN_EMAIL} #variable de entorno, en la que se encuentra el email.
      - ADMIN_PASSWORD=${DIRECTUS_ADMIN_PASSWORD} #variable de emtorno en la que se encuentra la contraseña
    ports:
      - "8055:8055"
    depends_on:  #Indica que el servicio depende de postgres y no se inicia hasta que el contenedor en PostgreSQL no este listo.
      - postgres
    volumes:
      - directus_data:/var/directus 
    restart: always



  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: backend
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USERNAME=beebit
      - DB_PASSWORD=esp93w5438
      - DB_DATABASE=dbbeebit
    ports:
      - "4000:4000"
    depends_on:
      - postgres
    volumes:
      - ./backend:/usr/src/app
      - /usr/src/app/node_modules
    command: npm run start:dev  #Ejecuta el comando para el modo desarrollo del backend(para que se recargeue automaticamente)
    restart: always



  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: frontend
    environment:
      - NEXT_PUBLIC_BACKEND_URL=http://localhost:4000
    ports:
      - "3000:3000"
    depends_on:
      - backend
    volumes:
      - ./frontend:/usr/src/app
      - /usr/src/app/node_modules
    command: npm run dev
    restart: always




volumes:
  postgres_data:  #almacena los datos de la db de postgreSQl para quye no se pierdan al reiniciar el contenedor
  directus_data:  #lo mismo pasa con directus y sus configuraciones que tengamos
